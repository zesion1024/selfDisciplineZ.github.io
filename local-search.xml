<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot 常用类</title>
    <link href="/2024/04/11/Springboot%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E7%B1%BB/"/>
    <url>/2024/04/11/Springboot%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="常用全局配置类"><a href="#常用全局配置类" class="headerlink" title="常用全局配置类"></a>常用全局配置类</h4><ol><li>  MybatisPlusConiguration</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.<span class="hljs-keyword">annotation</span>.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.<span class="hljs-keyword">inner</span>.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> MybatisPlusInterceptor mybatisPlusInterceptor() &#123;<br>    <span class="hljs-comment">// 初始化核心插件</span><br>    MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();<br>    <span class="hljs-comment">// 添加分页插件</span><br>    interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));<br>    <span class="hljs-keyword">return</span> interceptor;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>WebMvcConfiguration</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-keyword">import</span> com.sky.interceptor.<span class="hljs-type">JwtTokenAdminInterceptor</span>;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.<span class="hljs-type">Slf4j</span>;<br><span class="hljs-keyword">import</span> org.apache.commons.lang.text.<span class="hljs-type">ExtendedMessageFormat</span>;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.<span class="hljs-type">Autowired</span>;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.<span class="hljs-type">Bean</span>;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.<span class="hljs-type">Configuration</span>;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.<span class="hljs-type">HttpMessageConverter</span>;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.json.<span class="hljs-type">MappingJackson2HttpMessageConverter</span>;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.<span class="hljs-type">InterceptorRegistry</span>;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.<span class="hljs-type">ResourceHandlerRegistry</span>;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.<span class="hljs-type">WebMvcConfigurationSupport</span>;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.<span class="hljs-type">ApiInfoBuilder</span>;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.<span class="hljs-type">PathSelectors</span>;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.<span class="hljs-type">RequestHandlerSelectors</span>;<br><span class="hljs-keyword">import</span> springfox.documentation.service.<span class="hljs-type">ApiInfo</span>;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.<span class="hljs-type">DocumentationType</span>;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.<span class="hljs-type">Docket</span>;<br><br><span class="hljs-keyword">import</span> java.util.<span class="hljs-type">List</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置类，注册web层相关组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf</span>4j<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">JwtTokenAdminInterceptor</span> jwtTokenAdminInterceptor;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册自定义拦截器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> void addInterceptors(<span class="hljs-type">InterceptorRegistry</span> registry) &#123;<br>        log.info(<span class="hljs-string">&quot;开始注册自定义拦截器...&quot;</span>);<br>        <span class="hljs-comment">// 注册管理员端的拦截器</span><br>        registry.addInterceptor(jwtTokenAdminInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/admin/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/admin/employee/login&quot;</span>);<br><br>        <span class="hljs-comment">// 注册用户端的拦截器</span><br>        registry.addInterceptor(jwtTokenAdminInterceptor)<br>            .addPathPatterns(<span class="hljs-string">&quot;/user/**&quot;</span>)<br>            .excludePathPatterns(<span class="hljs-string">&quot;/user/login&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过knife4j生成接口文档</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    public <span class="hljs-type">Docket</span> docket() &#123;<br>        <span class="hljs-type">ApiInfo</span> apiInfo = <span class="hljs-keyword">new</span> <span class="hljs-type">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;苍穹外卖项目接口文档&quot;</span>)<br>                .version(<span class="hljs-string">&quot;2.0&quot;</span>)<br>                .description(<span class="hljs-string">&quot;苍穹外卖项目接口文档&quot;</span>)<br>                .build();<br>        <span class="hljs-type">Docket</span> docket = <span class="hljs-keyword">new</span> <span class="hljs-type">Docket</span>(<span class="hljs-type">DocumentationType</span>.<span class="hljs-type">SWAGGER_2</span>)<br>                .apiInfo(apiInfo)<br>                .select()<br>                .apis(<span class="hljs-type">RequestHandlerSelectors</span>.basePackage(<span class="hljs-string">&quot;com.sky.controller&quot;</span>))<br>                .paths(<span class="hljs-type">PathSelectors</span>.any())<br>                .build();<br>        <span class="hljs-keyword">return</span> docket;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置静态资源映射</span><br><span class="hljs-comment">     * @param registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> void addResourceHandlers(<span class="hljs-type">ResourceHandlerRegistry</span> registry) &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>WebsocketConfiguration</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebsocketConfiguration</span> </span>&#123;<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title">serverEndpointExporter</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServerEndpointExporter();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>OssConfiguration</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-keyword">import</span> com.sky.properties.AliOssProperties;<br><span class="hljs-keyword">import</span> com.sky.utils.AliOssUtil;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OssConfiguration</span> </span>&#123;<br>  <span class="hljs-comment">// spring boot 工程启动的时候交给 Bean 容器</span><br>  <span class="hljs-comment">// ConditionalOnMissingBean 保证Bean 容器只有一个 AliOssTtil 工具类</span><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@ConditionalOnMissingBean</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> AliOssUtil <span class="hljs-title">aliOssUtil</span><span class="hljs-params">(AliOssProperties aliOssProperties)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AliOssUtil(<br>        aliOssProperties.getEndpoint(),<br>        aliOssProperties.getAccessKeyId(),<br>        aliOssProperties.getAccessKeySecret(),<br>        aliOssProperties.getBucketName()<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>解决主键雪花算法导致的前端精度丢失问题</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.module.SimpleModule;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JacksonConfig</span> </span>&#123;<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) &#123;<br>    ObjectMapper objectMapper = builder.createXmlMapper(<span class="hljs-literal">false</span>).build();<br>    SimpleModule simpleModule = new SimpleModule();<br>    simpleModule.addSerializer(<span class="hljs-built_in">Long</span>.<span class="hljs-keyword">class</span>, ToStringSerializer.instance);<br>    objectMapper.registerModule(simpleModule);<br>    <span class="hljs-keyword">return</span> objectMapper;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用拦截器"><a href="#常用拦截器" class="headerlink" title="常用拦截器"></a>常用拦截器</h4><ol><li>JwtTokenAdminInterceptor</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.sky.interceptor;<br><br><span class="hljs-keyword">import</span> com.sky.constant.JwtClaimsConstant;<br><span class="hljs-keyword">import</span> com.sky.context.BaseContext;<br><span class="hljs-keyword">import</span> com.sky.properties.JwtProperties;<br><span class="hljs-keyword">import</span> com.sky.utils.JwtUtil;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jwt令牌校验的拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf</span>4j<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtTokenAdminInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> JwtProperties jwtProperties;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 校验jwt</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">//判断当前拦截到的是Controller的方法还是其他资源</span><br>    <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">handler</span> <span class="hljs-keyword">instanceof</span> HandlerMethod)) &#123;<br>      <span class="hljs-comment">//当前拦截到的不是动态方法，直接放行</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//1、从请求头中获取令牌</span><br>    String token = request.getHeader(jwtProperties.getAdminTokenName());<br><br>    <span class="hljs-comment">//2、校验令牌</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      log.info(<span class="hljs-string">&quot;jwt校验:&#123;&#125;&quot;</span>, token);<br>      Claims claims = JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);<br>      Long empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());<br>      log.info(<span class="hljs-string">&quot;当前员工id：&quot;</span>, empId);<br>      <span class="hljs-comment">// 存入线程变量</span><br>      BaseContext.setCurrentId(empId);<br>      <span class="hljs-comment">//3、通过，放行</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>      log.info(<span class="hljs-string">&quot;token校验不通过&quot;</span>);<br>      <span class="hljs-comment">//4、不通过，响应401状态码</span><br>      response.setStatus(<span class="hljs-number">401</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li> JwtUtil</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.sky.utils;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.JwtBuilder;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUtil</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成jwt</span><br><span class="hljs-comment">     * 使用Hs256算法, 私匙使用固定秘钥</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>secretKey jwt秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>ttlMillis jwt过期时间(毫秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>claims    设置的信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">createJWT</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> secretKey, long ttlMillis, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; claims</span>)</span> &#123;<br>        <span class="hljs-comment">// 指定签名的时候使用的签名算法，也就是header那部分</span><br>        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;<br><br>        <span class="hljs-comment">// 生成JWT的时间</span><br>        long expMillis = System.currentTimeMillis() + ttlMillis;<br>        <span class="hljs-built_in">Date</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(expMillis);<br><br>        <span class="hljs-comment">// 设置jwt的body</span><br>        JwtBuilder builder = Jwts.builder()<br>                <span class="hljs-comment">// 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span><br>                .setClaims(claims)<br>                <span class="hljs-comment">// 设置签名使用的签名算法和签名使用的秘钥</span><br>                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))<br>                <span class="hljs-comment">// 设置过期时间</span><br>                .setExpiration(exp);<br><br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Token解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>token     加密后的token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-function"><span class="hljs-title">parseJWT</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> secretKey, <span class="hljs-built_in">String</span> token</span>)</span> &#123;<br>        <span class="hljs-comment">// 得到DefaultJwtParser</span><br>        Claims claims = Jwts.parser()<br>                <span class="hljs-comment">// 设置签名的秘钥</span><br>                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))<br>                <span class="hljs-comment">// 设置需要解析的jwt</span><br>                .parseClaimsJws(token).getBody();<br>        <span class="hljs-keyword">return</span> claims;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li> AliossUtil</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> com.sky.utils;<br><br><span class="hljs-keyword">import</span> com.aliyun.oss.ClientException;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSS;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSClientBuilder;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSException;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><br>@Data<br>@AllArgsConstructor<br>@Slf4j<br><span class="hljs-keyword">public</span> class AliOssUtil &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> endpoint;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> accessKeyId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> accessKeySecret;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> bucketName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param bytes</span><br><span class="hljs-comment">     * @param objectName</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> upload(<span class="hljs-built_in">byte</span>[] bytes, <span class="hljs-keyword">String</span> objectName) &#123;<br><br>        <span class="hljs-comment">// 创建OSSClient实例。</span><br>        OSS ossClient = <span class="hljs-keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建PutObject请求。</span><br>            ossClient.putObject(bucketName, objectName, <span class="hljs-keyword">new</span> ByteArrayInputStream(bytes));<br>        &#125; <span class="hljs-keyword">catch</span> (OSSException oe) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span><br>                    + <span class="hljs-string">&quot;but was rejected with an error response for some reason.&quot;</span>);<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Error Code:&quot;</span> + oe.getErrorCode());<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Request ID:&quot;</span> + oe.getRequestId());<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Host ID:&quot;</span> + oe.getHostId());<br>        &#125; <span class="hljs-keyword">catch</span> (ClientException ce) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Caught an ClientException, which means the client encountered &quot;</span><br>                    + <span class="hljs-string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span><br>                    + <span class="hljs-string">&quot;such as not being able to access the network.&quot;</span>);<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Error Message:&quot;</span> + ce.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ossClient != <span class="hljs-keyword">null</span>) &#123;<br>                ossClient.shutdown();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//文件访问路径规则 https://BucketName.Endpoint/ObjectName</span><br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;https://&quot;</span>);<br>        stringBuilder<br>                .<span class="hljs-built_in">append</span>(bucketName)<br>                .<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;.&quot;</span>)<br>                .<span class="hljs-built_in">append</span>(endpoint)<br>                .<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;/&quot;</span>)<br>                .<span class="hljs-built_in">append</span>(objectName);<br><br>        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;文件上传到:&#123;&#125;&quot;</span>, stringBuilder.toString());<br><br>        <span class="hljs-keyword">return</span> stringBuilder.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Result</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.sky.result;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 后端统一返回结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>&lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Result</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer code; <span class="hljs-comment">//编码：1成功，0和其它数字为失败</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> msg; <span class="hljs-comment">//错误信息</span><br>    <span class="hljs-keyword">private</span> T data; <span class="hljs-comment">//数据</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params"></span>)</span> &#123;<br>        Result&lt;T&gt; result = <span class="hljs-keyword">new</span> Result&lt;T&gt;();<br>        result.code = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params">T <span class="hljs-built_in">object</span></span>)</span> &#123;<br>        Result&lt;T&gt; result = <span class="hljs-keyword">new</span> Result&lt;T&gt;();<br>        result.data = <span class="hljs-built_in">object</span>;<br>        result.code = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-function"><span class="hljs-title">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg</span>)</span> &#123;<br>        Result result = <span class="hljs-keyword">new</span> Result();<br>        result.msg = msg;<br>        result.code = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程存储"><a href="#线程存储" class="headerlink" title="线程存储"></a>线程存储</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.sky.context;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseContext</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">Long</span>&gt; threadLocal</span> = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCurrentId</span>(<span class="hljs-params">Long id</span>)</span> &#123;<br>        threadLocal.<span class="hljs-keyword">set</span>(id);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title">getCurrentId</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.<span class="hljs-keyword">get</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeCurrentId</span>(<span class="hljs-params"></span>)</span> &#123;<br>        threadLocal.<span class="hljs-keyword">remove</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nuxt 部署到云服务器</title>
    <link href="/2023/07/06/nuxt-%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/07/06/nuxt-%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>开启云服务器端口或者二级域名</li><li>将打包后的 .output 文件上传至服务器</li><li>在服务器全局安装 pm2 插件使 nuxt 项目在关闭后可以自动重启</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> i -g pm<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ol start="4"><li>在nuxt 根目录下创建一个 pm2 的配置文件 ecosystem.config.js  </li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// ecosystem.config.js  </span><br>module.exports = &#123;<br><span class="hljs-symbol">  apps:</span> [<br>    &#123;<br><span class="hljs-symbol">      name:</span> <span class="hljs-string">&quot;obase&quot;</span>,<br><span class="hljs-symbol">      exec_mode:</span> <span class="hljs-string">&quot;cluster&quot;</span>,<br><span class="hljs-symbol">      instances:</span> <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-comment">// Or a number of instances</span><br><span class="hljs-symbol">      script:</span> <span class="hljs-string">&quot;./.output/server/index.mjs&quot;</span>,<br><span class="hljs-symbol">      args:</span> <span class="hljs-string">&quot;start&quot;</span>,<br><span class="hljs-symbol">      env:</span> &#123;<br><span class="hljs-symbol">          PORT:</span> <span class="hljs-number">3001</span>,<br><span class="hljs-symbol">          HOST:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>      &#125;<br>    &#125;,<br>  ],<br>&#125;;<br><br></code></pre></td></tr></table></figure><p><img src="http://img.zesion.top/picture/image-20230706112746753.png" alt="image-20230706112746753"></p><p>启动 pm2 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">pm2 <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><ol start="5"><li>nginx 代理</li></ol><blockquote><p>如果是通过宝塔安装的 nginx 可以通过以下路径进行配置 </p></blockquote><p><img src="http://img.zesion.top/picture/image-20230706133434906.png" alt="image-20230706133434906"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs server">&#x2F;&#x2F; .conf 配置文件内容<br>server<br>&#123;<br>    listen 80;<br>    server_name obase.zesion.top;<br>    location &#x2F; &#123;<br>        proxy_pass http:&#x2F;&#x2F;127.0.0.1:3001;&#x2F;&#x2F; 端口号与 ecosystem.config.js PORT 配置项相同<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>重启nginx 即可使用域名访问</p><p>至此 nuxt3 部署全部完成</p></blockquote><ol><li><p>启动 pm2 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">pm2 <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure></li><li><p>停止 pm2</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">pm2 stop 项目名或<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure></li><li><p>删除  pm2 项目</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">pm2 <span class="hljs-keyword">delete</span> 项目名或<span class="hljs-symbol">id</span><br></code></pre></td></tr></table></figure></li><li><p>查看  pm2 项目</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> list<br></code></pre></td></tr></table></figure></li><li><p>linux 查看端口命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -ntlp</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Nuxt3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nuxt3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将vue项目部署到nginx</title>
    <link href="/2022/09/17/%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0nginx/"/>
    <url>/2022/09/17/%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0nginx/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="开启云服务器所需端口"><a href="#开启云服务器所需端口" class="headerlink" title="开启云服务器所需端口"></a>开启云服务器所需端口</h3><p><img src="http://img.zesion.top/picture/202209171618751.png"></p><ol><li><p><code>telnet IP 端口号</code> ,测试端口号有没有打开，如果没有则考虑是否是服务器防火墙问题</p><ol><li><p>查看防火墙信息</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> firewalld<span class="hljs-comment"># 开启防火墙</span><br>firewall-cmd --list-all<span class="hljs-comment"># 查询列表信息  ports : 后面显示的为打开的端口</span><br></code></pre></td></tr></table></figure><p><img src="http://img.zesion.top/picture/202209171625277.png"></p></li><li><p>若是ports为空，则自行添加所需要开放的端口（ 例如添加8080端口 ）</p><ol><li><pre><code class="hljs"># 添加需要开放的端口号firewall-cmd --zone=public --add-port=8080/tcp --permanent</code></pre><p>参数说明：</p><blockquote><p>–zone # 作用域<br>–add-port=80/tcp # 添加端口，格式为：端口/通讯协议<br>–permanent # 永久生效，没有此参数重启后失效</p><p>其它操作：<br>添加多个端口:<br>firewall-cmd –zone=public –add-port=80-90/tcp –permanent<br>删除<br>firewall-cmd –zone=public –remove-port=80/tcp –permanent</p></blockquote></li><li><p>重启防火墙</p><p><code>firewall-cmd --list-all        # 查询防火墙所有信息</code></p></li></ol><p>*** 如果上面所有操作都做了还是无法访问端口号，请删除服务器安全组重新创建即可</p></li></ol></li></ol><h3 id="进入到nginx-conf进行配置"><a href="#进入到nginx-conf进行配置" class="headerlink" title="进入到nginx.conf进行配置"></a>进入到nginx.conf进行配置</h3><ol><li><p>将vue打包生成的dist文件上传到服务器 </p><p><img src="http://img.zesion.top/picture/202209171632071.png"></p></li><li><p>重启 nginx 基本完成</p><ol><li><code>nginx -s reload</code></li></ol></li><li><blockquote><p>如果出现 500 状态码则将 dist 更换目录如 var (亲测放root下面会500)</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_全局事件总线</title>
    <link href="/2022/04/28/vue_%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/"/>
    <url>/2022/04/28/vue_%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Vue-全局事件总线"><a href="#Vue-全局事件总线" class="headerlink" title="Vue_全局事件总线"></a>Vue_全局事件总线</h3><p><img src="http://img.zesion.top/picture/202204282218863.png"></p><p>(1) 使组件间互相通信首先需要一个所有组件能够访问读取到的地方 (vue.VueComponent )。所有组件和vue实例最终都会指向 vue.VueComponent 于是我们可以在 vue 原型链上添加一个所有组件都能访问到的总线 ‘$bus’</p><blockquote><p>使用beforeCreate生命周期钩子函数在 vue 实例初始化时候在其原型链上添加一个 $bus 以供所有组件能够访问到</p></blockquote><p><img src="http://img.zesion.top/picture/202204282203957.png"></p><p>(2) 当所有组件都能够访问到 $bus 时就可以往上添加事件</p><blockquote><p>在A组件上往vue原型链上的 $bus 添加一个自定义事件</p></blockquote><p><img src="http://img.zesion.top/picture/202204282216604.png"></p><p>(3) 触发事件</p><p><img src="http://img.zesion.top/picture/202204282218460.png"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo_更换域名</title>
    <link href="/2022/04/15/hexo-%E6%9B%B4%E6%8D%A2%E5%9F%9F%E5%90%8D/"/>
    <url>/2022/04/15/hexo-%E6%9B%B4%E6%8D%A2%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第一步：github-设置"><a href="#第一步：github-设置" class="headerlink" title="第一步：github 设置"></a>第一步：github 设置</h3><p><img src="http://img.zesion.top/picture/202204152224650.jpeg"></p><h3 id="第二步：进入域名服务商控制台解析域名"><a href="#第二步：进入域名服务商控制台解析域名" class="headerlink" title="第二步：进入域名服务商控制台解析域名"></a>第二步：进入域名服务商控制台解析域名</h3><p> <img src="http://img.zesion.top/picture/202204152225592.jpg"></p><h3 id="第三步：点击添加两个录集，一个A类型，一个CNAME类型。"><a href="#第三步：点击添加两个录集，一个A类型，一个CNAME类型。" class="headerlink" title="第三步：点击添加两个录集，一个A类型，一个CNAME类型。"></a>第三步：点击添加两个录集，一个A类型，一个CNAME类型。</h3><p><img src="http://img.zesion.top/picture/202204152226669.jpg"></p><h3 id="第四步：添加一个CNAME类型录集主机记录填www，值填-github-仓库名其余默认。"><a href="#第四步：添加一个CNAME类型录集主机记录填www，值填-github-仓库名其余默认。" class="headerlink" title="第四步：添加一个CNAME类型录集主机记录填www，值填 github 仓库名其余默认。"></a>第四步：添加一个CNAME类型录集主机记录填www，值填 github 仓库名其余默认。</h3><p><img src="http://img.zesion.top/picture/202204152227005.jpg"></p><h3 id="第五步：添加一个A类型的录集主机记录不用填，值填github-ipv4地址（ping-仓库名-github-io可查看ip地址）其余默认。"><a href="#第五步：添加一个A类型的录集主机记录不用填，值填github-ipv4地址（ping-仓库名-github-io可查看ip地址）其余默认。" class="headerlink" title="第五步：添加一个A类型的录集主机记录不用填，值填github ipv4地址（ping 仓库名.github.io可查看ip地址）其余默认。"></a>第五步：添加一个A类型的录集主机记录不用填，值填github ipv4地址（ping 仓库名.github.io可查看ip地址）其余默认。</h3><p><img src="http://img.zesion.top/picture/202204152228591.jpg"></p><h3 id="第六步：修改-config文件里的url代码"><a href="#第六步：修改-config文件里的url代码" class="headerlink" title="第六步：修改_config文件里的url代码"></a>第六步：修改_config文件里的url代码</h3><p><img src="http://img.zesion.top/picture/202204152228956.jpg"></p><h3 id="如果无法出现问题则新建以下文件帮助解析：找到source文件夹在里面创建一个CNAME-txt文件并删除txt后缀"><a href="#如果无法出现问题则新建以下文件帮助解析：找到source文件夹在里面创建一个CNAME-txt文件并删除txt后缀" class="headerlink" title="如果无法出现问题则新建以下文件帮助解析：找到source文件夹在里面创建一个CNAME.txt文件并删除txt后缀"></a>如果无法出现问题则新建以下文件帮助解析：找到source文件夹在里面创建一个CNAME.txt文件并删除txt后缀</h3><p><img src="http://img.zesion.top/picture/202204152228032.jpg"></p><p><img src="http://img.zesion.top/picture/202204152229013.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git上传代码</title>
    <link href="/2022/02/25/git%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/02/25/git%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="配置全局账户信息"><a href="#配置全局账户信息" class="headerlink" title="配置全局账户信息"></a>配置全局账户信息</h3><ol><li>git config –global user.name “cjzywyz”</li><li>git config –global user.email “<a href="mailto:&#55;&#49;&#x30;&#x31;&#49;&#x33;&#x34;&#50;&#x34;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#55;&#49;&#x30;&#x31;&#49;&#x33;&#x34;&#50;&#x34;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a>“</li><li>生成ssh公钥：ssh-keygen -t rsa -C “你的邮箱地址”</li></ol><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><ol><li>初始化：git init</li><li>将本地库与远程库关联：git remote add origin 远程库地址</li><li>暂存文件：git add .</li><li>提交文件到本地库：git commit -m “备注”</li><li>推送到远程库：git push origin 本地分支：远程分支</li></ol><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ol><li>主分支：master;</li><li>创建分支：git branch ***</li><li>切换分支：git checkout ***</li><li>查看分支：git branch</li></ol><h3 id="git-详细命令查看"><a href="#git-详细命令查看" class="headerlink" title="git 详细命令查看"></a>git 详细命令查看</h3><ol><li><a href="https://github.com/xjh22222228/git-manual">https://github.com/xjh22222228/git-manual</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给hexo博客网页配置ssl</title>
    <link href="/2022/02/22/%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E9%A1%B5%E9%85%8D%E7%BD%AEssl/"/>
    <url>/2022/02/22/%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E9%A1%B5%E9%85%8D%E7%BD%AEssl/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查看-nginx-是否安装-ssl-模块"><a href="#查看-nginx-是否安装-ssl-模块" class="headerlink" title="查看 nginx 是否安装 ssl 模块"></a>查看 nginx 是否安装 ssl 模块</h3><ol><li>首先开启服务器443端口<br><img src="http://img.zesion.top/picture/202203112215560.png"></li><li>查看 nginx 有没有安装 ssl 模块，基于nginx版本不同所以nginx文件目录也会有所不同<ol><li>找到nginx的sbin目录<br> <code>/usr/local/nginx/sbin/</code></li><li>如果没有则在此目录下查看：<br> <code>/usr/sbin/</code></li></ol></li><li>查看有没有安装ssl模块（基于实际sbin目录输入命令）<br> <code>/usr/sbin/nginx -V</code><br> 出现下图则是已经安装过ssl模块<br> <img src="http://img.zesion.top/picture/202203112215090.png"><h3 id="安装-ssl-模块"><a href="#安装-ssl-模块" class="headerlink" title="安装 ssl 模块"></a>安装 ssl 模块</h3></li><li>去官网找到目前所使用的 nginx 版本下载下来，进入/usr/local路径 使用指令<br> <code>wget 下载链接</code></li><li>解压<br> <code>tar -xvf 压缩包全名</code></li><li>进入解压后的文件夹路径执行指令<br> <code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</code><br>之后执行<br><code>make</code> </li><li>报错的话执行下面的，不报错就算了：<br> <code>yum -y install openssl openssl-devel</code></li><li>继续执行下面的指令。将nginx启动文件覆盖。第一条指令是备份<ol><li>备份：<br>  <code>cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</code></li><li>替换、覆盖：<br>  <code>cp objs/nginx /usr/local/nginx/sbin/nginx</code><h3 id="修改-nginx-conf-文件使-ssl-生效"><a href="#修改-nginx-conf-文件使-ssl-生效" class="headerlink" title="修改 nginx.conf 文件使 ssl 生效"></a>修改 nginx.conf 文件使 ssl 生效</h3></li></ol></li><li>新建目录etc/ssl,并将下载到本地的 ssl 文件上传到此目录<br> <code>mkdir etc/ssl</code></li><li>编辑nginx的配置文件<br><code>vim etc/nginx/nginx.conf</code></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk">http&#123;<br>    <span class="hljs-comment">#http节点中可以添加多个server节点</span><br>    server&#123;<br>        <span class="hljs-comment">#监听443端口</span><br>        listen <span class="hljs-number">443</span>;<br>        server_name 你的域名;<br>        ssl on;<br>        ssl_certificate <span class="hljs-regexp">/etc/</span>ssl/<span class="hljs-number">1</span>.crt.pem; <span class="hljs-comment">#地址修改为pem文件地址</span><br>        ssl_certificate_key <span class="hljs-regexp">/etc/</span>ssl/<span class="hljs-number">1</span>.key; <span class="hljs-comment">#地址修改为key文件地址</span><br>        ssl_session_timeout <span class="hljs-number">5</span>m;<br>        ssl_protocols TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <span class="hljs-comment">#这是我的主页访问地址，因为使用的是静态的html网页，所以直接使用location就可以完成了。</span><br>        location / &#123;<br>                <span class="hljs-comment">#文件夹</span><br>                root <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/service/</span>ROOT;<br>                <span class="hljs-comment">#主页文件</span><br>                index index.html;<br>        &#125;<br>    &#125;<br>    server&#123;<br>        listen <span class="hljs-number">80</span>;<br>        server_name 你的域名;<br>        rewrite ^<span class="hljs-regexp">/(.*)$ https:/</span><span class="hljs-regexp">/你的域名:443/</span><span class="hljs-variable">$1</span> permanent;<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><ol><li>每次更改配置文件都需要重启nginx服务<pre><code class="hljs"> nginx -s reload</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将hexo部署到阿里云服务器</title>
    <link href="/2022/02/22/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/02/22/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装git与本地建立连接"><a href="#安装git与本地建立连接" class="headerlink" title="安装git与本地建立连接"></a>安装git与本地建立连接</h3><blockquote><p>首先开启服务器80端口</p></blockquote><ol><li>安装git<br> <code>yum install git</code></li><li>创建git用户：<br> <code>adduser git</code></li><li>添加git账户权限：<br> <code>chmod 740 /etc/sudoers</code></li><li>然后使用 vim 编辑器打开文件，如果你不会使用 vim ，移步 <a href="https://blog.csdn.net/weixin_43941364/article/details/104561592">Vim基础使用</a><br><code>vim /etc/sudoers</code></li><li>找到以下位置添加：<br> <code>git    ALL=(ALL)     ALL</code><br> <img src="http://img.zesion.top/picture/202203112218518.png" alt="1"></li><li>修改权限<br> <code>chmod 400 /etc/sudoers</code></li><li>设置 git 账户密码<br><code>sudo passwd git</code></li><li>切换至 git 用户，创建 ~/.ssh 文件夹和 ~/.ssh/authchmod -R 777 ./www orized_keys 文件，并赋予相应的权限<br> <code>su git</code><br> <code>mkdir  ~/.ssh</code><br> <code>vim  ~/.ssh/authorized_keys</code></li><li>将我们在win系统中生成的id_rsa.pub文件中的公钥复制到authorized_keys中。<br> <img src="http://img.zesion.top/picture/202203112218605.png" alt="2"></li><li>接着，输入一下命令，赋予权限<br><code>chmod 600 /home/git/.ssh/authorized_keys</code><br><code>chmod 700 /home/git/.ssh</code></li><li>打开 cmd ，输入：“ssh -v git@SERVER” 其中SERVER填写自己的云主机ip看到这句话表明成功：<br><img src="http://img.zesion.top/picture/202203112218151.png" alt="3"><br>到此为止就完成了服务器与主机的连接了。<h3 id="配置git钩子，用于自动部署"><a href="#配置git钩子，用于自动部署" class="headerlink" title="配置git钩子，用于自动部署"></a>配置git钩子，用于自动部署</h3></li><li>返回服务端命令行切换到 root 账户<br><code>sudo su</code></li><li>在 home 目录下创建 hexoGit 作为 Git 仓库目录并且赋予权限<br> <code>mkdir /home/hexoGit</code><br> <code>chown -R git:git /home/hexoGit</code><br> <code>chmod -R 755 /home/hexoGit</code></li><li>接下来创建 hexo 目录作为网站根目录，并赋予权限<br> <code>mkdir /home/hexo</code><br> <code>chown -R git:git /home/hexo</code><br> <code>chmod -R 755 /home/hexo</code></li><li>初始化 git 仓库：<br> <code>cd /home/hexoGit</code><br> <code>git init --bare hexo.git</code></li><li>在 /var/repo/hexo.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。<br> <code>vim /home/hexoGit/hexo.git/hooks/post-receive</code></li><li>在该文件里面输入以下脚本然后保存退出： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>git --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f<br></code></pre></td></tr></table></figure><blockquote><p>这其实是一个脚本文件，每当我们推送的时候就会触发这个脚本文件的执行。这样一旦本地仓库变更提交就会触发 Git 钩子，驱动自动部署。</p></blockquote></li><li>下面修改权限：<br> <code>chown -R git:git /home/hexoGit/hexo.git/hooks/post-receive</code><br> <code>chmod +x /home/hexoGit/hexo.git/hooks/post-receive</code><h3 id="安装并配置nginx"><a href="#安装并配置nginx" class="headerlink" title="安装并配置nginx"></a>安装并配置nginx</h3></li><li>安装nginx<br> <code>yum install -y nginx</code><blockquote><p>nginx默认配置路径/etc/nginx/</p></blockquote></li><li>启动服务器：<br> <code>systemctl start nginx</code><br> <code>systemctl enable nginx</code></li><li>打开 /etc/nginx/nginx.conf 目录<br> <code>vim /etc/nginx/nginx.conf</code></li><li>修改nginx里server配置项<br><img src="http://img.zesion.top/picture/202203112218912.png" alt="4"></li><li>修改本地config文件<br><img src="http://img.zesion.top/picture/202203112218381.png" alt="5"><h3 id="最后本地编译上传就完成了"><a href="#最后本地编译上传就完成了" class="headerlink" title="最后本地编译上传就完成了"></a>最后本地编译上传就完成了</h3></li><li>清除缓存文件：<br> <code>hexo clean</code></li><li>编译<br><code>hexo g</code></li><li>上传<br> <code>hexo d</code></li><li>如果此处出现权限问题请在服务器执行以下命令<br> <code>chown -R git:git /home/hexoGit/</code><br> <code>chown -R git:git /home/hexo</code></li><li>打开服务器重启nginx服务<br> <code>nginx -s reload</code><blockquote><p>此时home/hexo文件夹下应该有被推送上来的博客文件(如果没有文件就是失败请检查nginx.conf文件和git钩子脚本文件)</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_object.definProperty底层原理</title>
    <link href="/2021/12/19/vue_object-definProperty%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2021/12/19/vue_object-definProperty%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="语法为：Object-defineProperty-obj-prop-descriptor"><a href="#语法为：Object-defineProperty-obj-prop-descriptor" class="headerlink" title="语法为：Object.defineProperty(obj,prop,descriptor)"></a>语法为：Object.defineProperty(obj,prop,descriptor)</h4><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><blockquote><p>obj:要定义属性的对象<br>prop:要定义或修改的属性的名称<br>descriptor:配置项</p></blockquote><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    var number = 25</span><br><span class="xml">    var person=</span><span class="xquery">&#123;</span><br><span class="xquery">       <span class="hljs-built_in"> name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="xquery">        sex:<span class="hljs-string">&#x27;男&#x27;</span></span><br><span class="xquery">    &#125;</span><br><span class="xml">    //给age赋值18并且添加到person对象中</span><br><span class="xml">    Object.defineProperty(person,&#x27;age&#x27;,</span><span class="xquery">&#123;</span><br><span class="xquery">        value:<span class="hljs-string">&#x27;18&#x27;</span>,</span><br><span class="xquery">    &#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>此时 age 被添加到person对象中，<strong>但是age是不参与person的枚举（遍历）、修改和删除的</strong><br>如需age可以被枚举修改删除需要添加以下属性</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"> Object.defineProperty(person,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>    <span class="hljs-symbol">value:</span><span class="hljs-string">&#x27;18&#x27;</span>,<br>    <span class="hljs-symbol">enumerable:</span><span class="hljs-keyword">true</span>,    <span class="hljs-regexp">//</span>控制属性是否可以被枚举(遍历),默认值 <span class="hljs-keyword">false</span><br>    <span class="hljs-symbol">writable:</span><span class="hljs-keyword">true</span>,      <span class="hljs-regexp">//</span>控制属性是否可以被修改,默认值<span class="hljs-keyword">false</span><br>    <span class="hljs-symbol">configurable:</span><span class="hljs-keyword">true</span>,  <span class="hljs-regexp">//</span>控制属性是否可以被删除,默认值<span class="hljs-keyword">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><img src="http://img.zesion.top/picture/202203112220146.png"></p></blockquote><h4 id="高级配置项-get-set"><a href="#高级配置项-get-set" class="headerlink" title="高级配置项 get,set"></a>高级配置项 get,set</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> obj = &#123;<br>       <span class="hljs-built_in">num</span> : <span class="hljs-number">18</span><br>   &#125;<br>       <span class="hljs-keyword">var</span> obj2 = &#123;<br>       age : <span class="hljs-number">20</span><br>   &#125;<br>   <span class="hljs-built_in">Object</span>.defineProperty(obj2,<span class="hljs-string">&#x27;num&#x27;</span>,&#123;<br>   <span class="hljs-comment">// 当访问 obj2.num 时直接返回 obj.num</span><br>       <span class="hljs-keyword">get</span>()&#123;<br>           <span class="hljs-keyword">return</span> obj.<span class="hljs-built_in">num</span><br>       &#125;,<br>   <span class="hljs-comment">// 修改 obj2.num 时 将值赋值给 obj.num</span><br>       <span class="hljs-keyword">set</span>(value)&#123;<br>           obj.<span class="hljs-built_in">num</span> = value<br>       &#125;<br>   &#125;)<br></code></pre></td></tr></table></figure><blockquote><p style="text-indent:2em">get: 当有人读取num时get函数就会被调用且返回一个return值</p><p style="text-indent:2em">set: 当有人修改num属性时set函数就会被调用且会收到修改的具体值</p></blockquote><p><img src="http://img.zesion.top/picture/202203112220200.png"></p><h4 id="object-definProperty详细用法"><a href="#object-definProperty详细用法" class="headerlink" title="object.definProperty详细用法"></a>object.definProperty详细用法</h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">MSD</a><br><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=11">B站</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue key</title>
    <link href="/2021/12/18/Vue-key/"/>
    <url>/2021/12/18/Vue-key/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Key定义"><a href="#Key定义" class="headerlink" title="Key定义:"></a>Key定义:</h4><pre><code class="hljs">相同父元素里面子元素的独特标识，重复的key会造成渲染错误 </code></pre><h4 id="key的使用"><a href="#key的使用" class="headerlink" title="key的使用"></a>key的使用</h4><pre><code class="hljs">当传入两个形参时第一个输出的时数组里面的对象 而index 输出的是数组对象的索引值.</code></pre><h4 id="当：key的值为-index时"><a href="#当：key的值为-index时" class="headerlink" title="当：key的值为 index时"></a>当：key的值为 index时</h4><p><img src="http://img.zesion.top/picture/202203112219561.png"></p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="http://img.zesion.top/picture/202203112219994.png"></p><h4 id="当：key的值为-id时"><a href="#当：key的值为-id时" class="headerlink" title="当：key的值为 id时"></a>当：key的值为 id时</h4><p><img src="http://img.zesion.top/picture/202203112219292.png"></p><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><p><img src="http://img.zesion.top/picture/202203112219226.png"></p><h4 id="小案例-key-index"><a href="#小案例-key-index" class="headerlink" title="小案例 (key=index);"></a>小案例 (key=index);</h4><pre><code class="hljs">当点击按钮在原有数组后添加新对象</code></pre><blockquote><p>(1)给每个 li 元素后添加一个 input 输入框并随便填入值</p><blockquote><p><img src="http://img.zesion.top/picture/202203112219698.png"><br>(2)点击添加时会发现 value 内容错乱了<br><img src="http://img.zesion.top/picture/202203112219624.png"></p></blockquote></blockquote><h4 id="key为index）原理图："><a href="#key为index）原理图：" class="headerlink" title="(key为index）原理图："></a>(key为index）原理图：</h4><blockquote><p><img src="http://img.zesion.top/picture/202203112219699.png"></p></blockquote><h4 id="index作为key时-原理"><a href="#index作为key时-原理" class="headerlink" title="(index作为key时)原理:"></a>(index作为key时)原理:</h4><blockquote><p style='text-indent:2em'>首先 vue 会根据用户创建的 vue 实例生成虚拟 DOM 进而转为用户可以看到的浏览器上显示的真实DOM</p><p style='text-indent:2em'>当点击添加按钮在原有数据之前添加新数据时 vue 会生成一个新的虚拟DOM</p><p style='text-indent:2em'>新的虚拟DOM与初始虚拟DOM进行对比，发现第一个li元素的内容发生变化，于是vue会将新的虚拟DOM的值转为真实的新的DOM。继续往下对比input里面的值会发现新DOM里面input里面没有值所以会直接将原有DOM里面input的值拿过来从而造成了input里面value的值发生错乱</p><p style='text-indent:2em'>如果没有手动为其添加key时vue会自动为其添加key值，当初始虚拟DOM与新虚拟DOM进行对比时新添加的元素会变为001从而导致两边虚拟DOM数据不一致而倒置BUG。当需要在原有元素<strong>之前</strong>添加新元素时并不建议使用index,在其之后添加并不会出现此BUG</p></blockquote><h4 id="key为id-原理图："><a href="#key为id-原理图：" class="headerlink" title="(key为id)原理图："></a>(key为id)原理图：</h4><blockquote><p><img src="http://img.zesion.top/picture/202203112219851.png"></p></blockquote><h4 id="id作为key时-原理"><a href="#id作为key时-原理" class="headerlink" title="(id作为key时)原理:"></a>(id作为key时)原理:</h4><blockquote><p style='text-indent:2em'>新DOM与初始DOM对比vue会发现初始DOM没有key为004的元素与之匹配所以会直接将之生成为新的真实DOM</p><p style='text-indent:2em'>继而往下发现有与之匹配的001，而自身input里面并没有内容所以会直接将初始真实DOM拿过来使用</p></blockquote><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>1.虚拟DOM中key的作用；</p><blockquote><p>(1)Key是虚拟DOM对象的标识，当状态中的数据发生变化时.vue会根据【新数据】生成【新的虚拟DOM】，随后vue进行新旧DOM的差异比较，规则如下</p></blockquote><hr><p>2.对比规则</p><blockquote><p>(1)旧虚拟DOM中找到了与新虚拟DOM相同的key;</p><blockquote><p>①若虚拟DOM中内容没变，直接使用之前的真实DOM<br>②若虚拟DOM中内容改变。则生成新的真实DOM，随后替换页面之前的真实DOM</p></blockquote></blockquote><blockquote><p>(2)旧虚拟DOM中未找到与新虚拟DOM相同的key；</p><blockquote><p>①创建新的真实DOM，随后渲染到页面中</p></blockquote></blockquote><hr><p>3.用index作为key可能会引发的问题；</p><blockquote><p>(1)若对数据进行：逆序添加，逆序删除等破坏顺序操作</p><blockquote><p>会产生没有必要的真实DOM更新==&gt;界面没有问题，但效率低。</p></blockquote></blockquote><blockquote><p>(2)如果结构中还包含输入类（例如：index）的DOM</p><blockquote><p>会产生错误DOM更新==&gt;界面有问题</p></blockquote></blockquote><hr><p>4.开发中如何选择key?</p><blockquote><p>1.最好使用每条数据的唯一标识作为key,如id、手机号、身份证号、学号等唯一值<br>2.如果不存在对数据的逆序添加，逆序删除等破坏顺序的操作，仅用于渲染列表用于展示使用index作为key是没有问题的</p></blockquote><hr></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的基本使用</title>
    <link href="/2021/10/14/hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/10/14/hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="新建-hexo-文章"><a href="#新建-hexo-文章" class="headerlink" title="新建 hexo 文章"></a>新建 hexo 文章</h3><blockquote><ul><li>命令: hexo new “hello world”</li></ul></blockquote><h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><blockquote><ul><li>命令: hexo g</li></ul></blockquote><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><blockquote><ul><li>命令: hexo s </li></ul></blockquote><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><blockquote><ul><li>命令: hexo d</li></ul></blockquote><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><blockquote><ul><li>命令: hexo clean</li></ul></blockquote><h3 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h3><blockquote><ul><li>命令: categories:- hexo </li></ul></blockquote><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><blockquote><ul><li>命令: <code>![](/img/hexo的基本使用/1.png)</code> </li><li>路径前 “/“ 不能省略</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue第一章</title>
    <link href="/2021/10/14/Vue%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2021/10/14/Vue%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>Vue框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
